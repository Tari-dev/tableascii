{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tableascii","text":"<p>A simple, lightweight, no-dependency Python library to create clean ASCII Table.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install from pypi</p> <pre><code>pip install tableascii\n</code></pre> <p>Or directly from Github</p> <pre><code>pip install git+https://github.com/Tari-dev/tableascii.git\n</code></pre>"},{"location":"#usage-example","title":"Usage Example","text":"<pre><code>from tableascii import Table\n\ndata = [\n    [\"Name\", \"Age\"],\n    [\"Alice\", 30],\n    [\"Bob\", 25]\n]\n\ntb = Table(data)\nprint(tb.create())\n</code></pre> <pre><code>+-------------+\n| Name  | Age |\n|-------------|\n| Alice | 30  |\n| Bob   | 25  |\n+-------------+\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Pure ASCII output</li> <li>Simple and Lightweight</li> <li>No dependencies</li> <li>Automatically adjusts column width</li> </ul>"},{"location":"#license","title":"License","text":"<p>MIT</p>"},{"location":"reference/","title":"Table Class","text":"<p>A simple ASCII table generator.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[List[str | int]]</code> <p>A 2D list representing table headers and rows.</p> required Source code in <code>tableascii/core.py</code> <pre><code>class Table:\n    \"\"\"\n    A simple ASCII table generator.\n\n    Args:\n        data (List[List[str|int]]): A 2D list representing table headers and rows.\n    \"\"\"\n\n    def __init__(self, data):\n        self.header = data[0]\n        self.rows = data[1:]\n        self.data = data\n        # self.columns = [[d[i] for d in data] for i in range(self.col_num)]\n        self.width = self.col_num - 1\n\n    @property\n    def col_num(self):\n        \"\"\"Number of columns\"\"\"\n        return len(self.header)\n\n    @property\n    def col_width(self):\n        \"Width of each column\"\n        return [[len(str(d[i])) for d in self.data] for i in range(self.col_num)]\n\n    def create(self) -&gt; str:\n        \"\"\"Creates the table\"\"\"\n        output = []\n        c = {}\n        for i, col_w in enumerate(self.col_width):\n            mx_w = max(col_w)\n            c[f'c_{i+1}'] = mx_w\n            self.width += mx_w + 2\n\n        output.append(\"+\" + \"-\" * self.width + \"+\")\n        row_fmt = \"| \" + \" | \".join([\"{:&lt;{c_%d}}\" % (i + 1) for i in range(self.col_num)]) + \" |\"\n        output.append(row_fmt.format(*self.header, **c))\n        output.append(\"|\" + \"-\" * self.width + \"|\")\n\n        for row in self.rows:\n            row_fmt = \"| \" + \" | \".join([\"{:&lt;{c_%d}}\" % (i + 1) for i in range(self.col_num)]) + \" |\"\n            output.append(row_fmt.format(*row, **c))\n\n        output.append(\"+\" + \"-\" * self.width + \"+\")\n\n        return '\\n'.join(output)\n\n    def display(self):\n        \"\"\"Prints the table\"\"\"\n        return print(self.create())\n</code></pre>"},{"location":"reference/#tableascii.core.Table.col_num","title":"<code>col_num</code>  <code>property</code>","text":"<p>Number of columns</p>"},{"location":"reference/#tableascii.core.Table.col_width","title":"<code>col_width</code>  <code>property</code>","text":"<p>Width of each column</p>"},{"location":"reference/#tableascii.core.Table.create","title":"<code>create()</code>","text":"<p>Creates the table</p> Source code in <code>tableascii/core.py</code> <pre><code>def create(self) -&gt; str:\n    \"\"\"Creates the table\"\"\"\n    output = []\n    c = {}\n    for i, col_w in enumerate(self.col_width):\n        mx_w = max(col_w)\n        c[f'c_{i+1}'] = mx_w\n        self.width += mx_w + 2\n\n    output.append(\"+\" + \"-\" * self.width + \"+\")\n    row_fmt = \"| \" + \" | \".join([\"{:&lt;{c_%d}}\" % (i + 1) for i in range(self.col_num)]) + \" |\"\n    output.append(row_fmt.format(*self.header, **c))\n    output.append(\"|\" + \"-\" * self.width + \"|\")\n\n    for row in self.rows:\n        row_fmt = \"| \" + \" | \".join([\"{:&lt;{c_%d}}\" % (i + 1) for i in range(self.col_num)]) + \" |\"\n        output.append(row_fmt.format(*row, **c))\n\n    output.append(\"+\" + \"-\" * self.width + \"+\")\n\n    return '\\n'.join(output)\n</code></pre>"},{"location":"reference/#tableascii.core.Table.display","title":"<code>display()</code>","text":"<p>Prints the table</p> Source code in <code>tableascii/core.py</code> <pre><code>def display(self):\n    \"\"\"Prints the table\"\"\"\n    return print(self.create())\n</code></pre>"}]}